<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/>





<title>Jackson序列化双向关联映射的四种方法 - 许炎的个人博客</title>


    <meta name="keywords" content="JPA,Hibernate,Spring,Jackson">


<meta name="description" content="如果一个对象与另一个对象之间存在互相引用(bi-directional relationship)，序列化该对象就会出现stackoverflow异常，这篇文章主要介绍使用jackson序列化工具处理该问题的几种解决方案。  一.Infinite Recursion首先不要被文章标题所误导，该问题并不是因为使用了jpa&#x2F;hibernate的双向关联关系才会出现，简书上这篇文章说该异常根本原因在于">
<meta property="og:type" content="article">
<meta property="og:title" content="Jackson序列化双向关联映射的四种方法">
<meta property="og:url" content="https://blog.staynoob.cn/jackson-serialize-bi-directional-relationship-infinite-recursion">
<meta property="og:site_name" content="NOOB">
<meta property="og:description" content="如果一个对象与另一个对象之间存在互相引用(bi-directional relationship)，序列化该对象就会出现stackoverflow异常，这篇文章主要介绍使用jackson序列化工具处理该问题的几种解决方案。  一.Infinite Recursion首先不要被文章标题所误导，该问题并不是因为使用了jpa&#x2F;hibernate的双向关联关系才会出现，简书上这篇文章说该异常根本原因在于">
<meta property="og:locale">
<meta property="og:image" content="https://blog.staynoob.cn/img/jackson-bidirectional-relationships.jpg">
<meta property="article:published_time" content="2017-01-01T06:07:03.000Z">
<meta property="article:modified_time" content="2024-06-29T11:52:49.161Z">
<meta property="article:author" content="noob9527">
<meta property="article:tag" content="JPA">
<meta property="article:tag" content="Hibernate">
<meta property="article:tag" content="Spring">
<meta property="article:tag" content="Jackson">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://blog.staynoob.cn/img/jackson-bidirectional-relationships.jpg">


    <link rel="shortcut icon" type="image/x-icon" href="/favicon.ico " />
    <link rel="Bookmark" type="image/x-icon" href="/favicon.ico " />
    <link rel="icon" type="image/x-icon" href="/favicon.ico " />



<meta name="google-site-verification" content="9GCG5tynfuvxF_9_xHvo8tvc7CqHeqKMZQqda25rDPs" />


<meta name="baidu-site-verification" content="IVBrfkvovZ" />



<link rel="alternative" href="/atom.xml" title="NOOB" type="application/atom+xml">



<script src="/vendors/jquery/jquery.js"></script>
<script src="/vendors/bootstrap/js/bootstrap.js"></script>
<script src="/js/script.js"></script>


<link rel="stylesheet" href="/vendors/font-awesome/css/font-awesome.min.css">


<link rel="stylesheet" href="/css/style.css">


<script type="text/javascript" id="hexo.configuration">
  var CONFIG = {
    search: {
      path: '/search.xml'
    }  
  };
</script>
<meta name="generator" content="Hexo 6.3.0"></head>
<body>
    <header id="site-nav">
    <div id="banner"></div>
    <nav class="navbar navbar-inverse">
        <div class="container-fluid">
            
             <!-- social link-->
            <div class="social-link">
                <ul class="nav navbar-nav navbar-left">
                    
                        
                            <li><a href="https://github.com/noob9527" target="_blank">
                                <i class="fa fa-2x fa-github"></i>
                            </a></li>
                        
                            <li><a href="http://weibo.com/p/1005052678297054" target="_blank">
                                <i class="fa fa-2x fa-weibo"></i>
                            </a></li>
                        
                    
                    
                        <li><a href="/atom.xml" rel="alternate">
                            <i class="fa fa-2x fa-rss"></i>
                        </a></li>
                    
                </ul>
            </div>
            
            <div class="navbar-header">
                <!--toggle button-->
                <button class="navbar-toggle collapsed" data-toggle="collapse" 
                        data-target="#navbar-link" aria-expanded="false">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>

                <!--brand-->
                <a href="/" class="navbar-brand">
                    <span>NOOB</span>
                </a>
            </div>
            
            <!--link-->
            <div class="collapse navbar-collapse" id="navbar-link">
                <ul class="nav navbar-nav navbar-right">
                    
                        <li>
                            <a href="/" rel="section">
                                
                                    <i class="fa fa-home fa-fw"></i>
                                
                                首页
                            </a>
                        </li>
                    
                        <li>
                            <a href="/archives" rel="section">
                                
                                    <i class="fa fa-archive fa-fw"></i>
                                
                                归档
                            </a>
                        </li>
                    
                        <li>
                            <a href="/about" rel="section">
                                
                                    <i class="fa fa-user fa-fw"></i>
                                
                                关于
                            </a>
                        </li>
                    
                </ul>
            </div>
        </div>
    </nav>
</header>

    
    <div class="site-content container-fluid">
        <div class="row">
            <div class="col-md-9">
                <main>
                    <article id="post-Jackson序列化双向关联映射的四种方法"
         class="post post-type-post" itemscope itemprop="blogPost">

    <div class="post-inner">
        <!-- title -->
        
        <header class="post-header">
            <h1 itemprop="name">
    
      Jackson序列化双向关联映射的四种方法
    
</h1>
        </header>
        

        <!-- meta data -->
        <div class="post-meta">
            <span class="post-date">
    <span class="post-meta-item-icon">
      <i class="fa fa-calendar"></i>
    </span>
    <span class="post-meta-item-text">发表于</span>
    <time itemprop="datePublished" datetime="2017-01-01T14:07:03+08:00" 
          content="2017-01-01">
        2017-01-01
    </time>
</span>
            
<span class="post-category">
    &nbsp; | &nbsp;
    <span class="post-meta-item-icon">
        <i class="fa fa-folder-o"></i>
    </span>
    <span class="post-meta-item-text">分类于</span>
    <span itemprop="about" itemscope itemtype="https://schema.org/Thing">
        <a class="article-category-link" href="/categories/Backend/">Backend</a>
    </span>
</span>


            
    

        </div>

        <!-- gallery-->
        
        <div class="post-gallery">
              <div class="post-gallery-photos">
    
        
          <!--<a class="post-gallery-img fancybox" href="/img/jackson-bidirectional-relationships.jpg" rel="gallery_cly05clin000uiweyh5g06u0q">-->
            <img src="/img/jackson-bidirectional-relationships.jpg" itemprop="image">
          <!--</a>-->
        
    
  </div>

        </div>
        

        <!-- entry -->
        <div class="post-entry" itemprop="postBody">
            
            <!--文章内容-->
            <div class="post-content"><blockquote>
<p>如果一个对象与另一个对象之间存在互相引用(bi-directional relationship)，序列化该对象就会出现stackoverflow异常，这篇文章主要介绍使用jackson序列化工具处理该问题的几种解决方案。</p>
</blockquote>
<h3 id="一-Infinite-Recursion"><a href="#一-Infinite-Recursion" class="headerlink" title="一.Infinite Recursion"></a>一.Infinite Recursion</h3><p>首先不要被文章标题所误导，该问题并不是因为使用了jpa/hibernate的双向关联关系才会出现，简书上<a target="_blank" rel="noopener" href="http://www.jianshu.com/p/d7f0b383a228">这篇文章</a>说该异常根本原因在于hibernate的lazyload，我认为是一本正经的胡说八道，先来看一个简单的例子:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Card&gt; cardList;</span><br><span class="line">    <span class="comment">//constructor getter setter...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Card</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line">    <span class="comment">//constructor getter setter...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试环境 junit, assertj</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">        <span class="type">Card</span> <span class="variable">card</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Card</span>();</span><br><span class="line">        <span class="comment">//相互引用</span></span><br><span class="line">        card.setCustomer(customer);</span><br><span class="line">        customer.addCard(card);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        Assertions.assertThatThrownBy(() -&gt; objectMapper.writeValueAsString(customer))</span><br><span class="line">                .hasMessageStartingWith(<span class="string">&quot;Infinite recursion (StackOverflowError)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上例中消费者与信用卡之间存在双向的一对多关系，序列化其中任意一个对象都会导致StackOverflowError，换句话说只要两个对象之间存在互相引用，就无法直接序列化，即便是在js中也不例外，看代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试环境 mocha,shouldjs</span></span><br><span class="line"><span class="keyword">var</span> should = <span class="built_in">require</span>(<span class="string">&#x27;should&#x27;</span>);</span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;json&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;如果两个对象互相引用,则无法直接序列化&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> foo = &#123;&#125;;</span><br><span class="line">        <span class="keyword">var</span> bar = &#123;&#125;;</span><br><span class="line">        foo.<span class="property">bar</span> = bar;</span><br><span class="line">        bar.<span class="property">foo</span> = foo;</span><br><span class="line">        <span class="title function_">should</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(foo);&#125;).<span class="keyword">throw</span>(<span class="string">&#x27;Converting circular structure to JSON&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>综上所述，这锅hibernate不接。问题介绍完毕，下面来看看当前热门的序列化工具jackson提供了哪些方法来处理该问题，以下讨论的方法截至jackson2.8.4版本。</p>
<span id="more"></span>
<h3 id="二-JsonIgnore"><a href="#二-JsonIgnore" class="headerlink" title="二.@JsonIgnore"></a>二.@JsonIgnore</h3><p>应用JsonIgnore注解后，代码看起来像这样<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Card&gt; cardList;</span><br><span class="line">    <span class="comment">//constructor getter setter...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Card</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line">    <span class="comment">//constructor getter setter...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//serialize customer, result should like</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">//     &quot;cardList&quot;: [</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             &quot;id&quot;: 1</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     ]</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><br>该注解忽略card对象的customer属性，从而避免了无限递归的问题。需要说明的是JsonIgnore注解的设计初衷并不是用于解决该问题，但由于该方法简单粗暴易于理解，因此相当一部分程序员还是选择了该方法。下面说说我不推荐使用的理由:</p>
<ol>
<li>使用了该注解后，如果你希望单独序列化一个card对象，那么json的接收端无法得知关于customer的任何信息</li>
<li>当服务端接受到客户端发送过来的json字符串，并希望反序列化为card对象时，其customer属性永远为null</li>
</ol>
<p>换言之，当你感觉某个属性需要使用JsonIgnore注解的时候，你应该先考虑是否可以直接删除该属性。拿上面的例子来说，也许你需要的只是在Card类中删除customer属性。JsonIgnore属性正确的应用场景应该是实体中类似于createAt,updateAt这样的字段，这些字段仅由服务端维护，且不需要发送至客户端，(注：password字段也不应该使用该注解，应该使用<code>@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)</code>，因为你可能希望接受客户端发送的password)</p>
<h3 id="三-JsonManagedReference与-JsonBackReference"><a href="#三-JsonManagedReference与-JsonBackReference" class="headerlink" title="三.@JsonManagedReference与@JsonBackReference"></a>三.@JsonManagedReference与@JsonBackReference</h3><p>使用该方法后，代码看起来像这样<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@JsonManagedReference(&quot;customer-card&quot;)</span> <span class="comment">//当一个类中存在多个@JsonManagedReference注解时，其value值才是必须的</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Card&gt; cardList;</span><br><span class="line">    <span class="comment">//constructor getter setter...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Card</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@JsonBackReference(&quot;customer-card&quot;)</span> <span class="comment">//同上</span></span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line">    <span class="comment">//constructor getter setter...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//serialize customer, result should like</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">//     &quot;cardList&quot;: [</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             &quot;id&quot;: 1</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     ]</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><br>@JsonManagedReference与@JsonBackReference生来就是为了解决Infinite Recursion问题。它与@JsonIgnore最大的不同在于反序列化时，标注JsonIgnore注解的属性始终为null，而使用这对注解的反序列化结果为两个互相引用的对象。然而这对注解同样不推荐使用，以下是原因:</p>
<ol>
<li>相信你也看到了，它的序列化结果与使用@JsonIgnore一模一样，当你需要单独序列化card对象时，Json接收端无法知道该card属于哪个customer。</li>
<li>JsonBackReference只能使用在一对多关系中&quot;一&quot;的一端，这意味着当你有Card与CardCategory两个类时，关系的维护端在CardCategory类，序列化信用卡类别可以得到该类别的所有信用卡，而序列化信用卡却无法得到该信用卡的类别，这显然不是你想要的。</li>
</ol>
<p>综上所述，然并卵。</p>
<h3 id="四-JsonIdentityInfo"><a href="#四-JsonIdentityInfo" class="headerlink" title="四.@JsonIdentityInfo"></a>四.@JsonIdentityInfo</h3><p>使用该方法后，代码看起来像这样<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = &quot;id&quot;, scope = Customer.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Card&gt; cardList;</span><br><span class="line">    <span class="comment">//constructor getter setter...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = &quot;id&quot;, scope = Card.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Card</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line">    <span class="comment">//constructor getter setter...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为了更好的演示该注解，我在customer对象中添加了两张card</span></span><br><span class="line"><span class="comment">//serialize customer, result should like</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">//     &quot;cardList&quot;: [</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">//             &quot;customer&quot;: 1</span></span><br><span class="line"><span class="comment">//         &#125;,</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             &quot;id&quot;: 2,</span></span><br><span class="line"><span class="comment">//             &quot;customer&quot;: 1</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     ]</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><br>效果简直完美，当该注解检测到本次序列化中有重复对象时，使用指定的生成器生成一个替代对象(上例中的id)，序列化card对象不会丢失customer信息，反序列化时能够完整的将对象恢复到序列化前的状态，顺便完美的规避的数据冗余，看上去非常美好。（注：要开始装B了！）但是通信原理告诉我们，数据格式的信息冗余度越低，则对其编解码需求的运算量越大，同时在信息传输过程中，越容易受到噪声干扰而失真(参见<a href="http://blog.staynoob.cn/post/algorithm/shannon-mathematical-theory-of-communication">香农信息论与回答老鼠喝药问题的正确姿势</a>)。（注：装B结束！）下面是应用了该注解后，序列化customer.cardList的结果:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 理想</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;customer&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;cardList&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;customer&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;cardList&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 现实(WTF)</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;customer&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;cardList&quot;</span>: [</span><br><span class="line">                <span class="number">1</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                    <span class="string">&quot;customer&quot;</span>: <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">2</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><br>从上面惨不忍睹的现实中可以看出，jackson序列化对象时使用深度优先遍历(Depth-first-traversal)，在card1.customer.cardList中写入了card2的信息，后面出现的card2则被替换成其id。也许你会说丑是丑了点，但信息量并没有减少，在json的接收端经过一些特殊处理依然可以将其反序列化至原来的状态。这也正如我前面所说的，该方法增加了编码与解码所需的运算量，这意味着你可能需要为该注解引入额外的libarary来进行序列化与反序列化（例如<a target="_blank" rel="noopener" href="https://github.com/jsog/jsog">JSOG</a>），考虑到json的接收端可能是各种平台(android,ios,web)，因此该方案的实用性依然非常有限。</p>
<h3 id="五-JsonView"><a href="#五-JsonView" class="headerlink" title="五.@JsonView"></a>五.@JsonView</h3><p>使用该方法后，代码看起来像这样<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomerWithCard</span>&#123;&#125;</span><br><span class="line">    <span class="meta">@JsonView(&#123;CustomerWithCard.class, Card.CardWithCustomer.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@JsonView(CustomerWithCard.class)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Card&gt; cardList;</span><br><span class="line">    <span class="comment">//constructor getter setter...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Card</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CardWithCustomer</span>&#123;&#125;</span><br><span class="line">    <span class="meta">@JsonView(&#123;Customer.CustomerWithCard.class, CardWithCustomer.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@JsonView(CardWithCustomer.class)</span></span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line">    <span class="comment">//constructor getter setter...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="number">1L</span>);</span><br><span class="line">        <span class="type">Card</span> <span class="variable">card1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Card</span>(<span class="number">1L</span>, customer1);</span><br><span class="line">        <span class="type">Card</span> <span class="variable">card2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Card</span>(<span class="number">2L</span>, customer1);</span><br><span class="line">        customer1.addCard(card1);</span><br><span class="line">        customer1.addCard(card2);</span><br><span class="line">        List&lt;Card&gt; list = Arrays.asList(card1, card2);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="comment">//序列化时不包括没有@JsonView注解的属性</span></span><br><span class="line">        objectMapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//序列化需要先指定View</span></span><br><span class="line">        Assertions.assertThat(objectMapper.writerWithView(Customer.CustomerWithCard.class).writeValueAsString(customer))</span><br><span class="line">                .isNotEmpty();</span><br><span class="line">        Assertions.assertThat(objectMapper.writerWithView(Card.CardWithCustomer.class).writeValueAsString(list))</span><br><span class="line">                .isNotEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>下面是序列化的结果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//serialize customer use CustomerWithCard view</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;cardList&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//serialize card use CardWithCustomer view</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;customer&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;customer&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br>这种方法的缺点是配置麻烦了一些，但总算勉强能用，下面顺带提一下如何在springmvc(4.3.4版本)中使用该方法，使用了该方法的controller看起来像这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/api&quot;, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CustomerService customerService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomerController</span><span class="params">(CustomerService customerService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.customerService = customerService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/customer/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@JsonView(Customer.CustomerWithCard.class)</span></span><br><span class="line">    <span class="keyword">public</span> Customer <span class="title function_">getCustomerById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customerService.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/customer/&#123;customerId&#125;/card&quot;)</span></span><br><span class="line">    <span class="meta">@JsonView(Card.CardWithCustomer.class)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Card&gt; <span class="title function_">listCardByCustomerId</span><span class="params">(<span class="meta">@PathVariable</span> Long customerId)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customerService.listCardByCustomerId(customerId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/customer/&#123;customerId&#125;/card&quot;)</span></span><br><span class="line">    <span class="meta">@JsonView(Card.CardWithCustomer.class)</span></span><br><span class="line">    <span class="keyword">public</span> Page&lt;Card&gt; <span class="title function_">listCardByCustomerIdWithPage</span><span class="params">(<span class="meta">@PathVariable</span> Long customerId, Pageable pageable)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customerService.listCardByCustomerIdWithPage(customerId, pageable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>需要注意的是springmvc默认配置MapperFeature.DEFAULT_VIEW_INCLUSION为false，因此如果你在控制器方法上指定了要返回的JsonView，返回的实体类中所有没有该JsonView注解的属性都不会被序列化，这往往正是我们需要的效果，然而也正因为如此，上面代码中带物理分页的listCardByCustomerIdWithPage方法只会返回空对象，因为spring data的PageImpl类中的属性是没有JsonView注解的，我们还需要针对它做一些额外的配置，代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于解决使用json view,并且 MapperFeature.DEFAULT_VIEW_INCLUSION 为false的情况下</span></span><br><span class="line"><span class="comment"> * spring data的page对象无法正确序列化的问题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Module <span class="title function_">springDataPageModule</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>().addSerializer(Page.class, <span class="keyword">new</span> <span class="title class_">JsonSerializer</span>&lt;Page&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Page page, JsonGenerator gen, SerializerProvider serializers)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            gen.writeStartObject();</span><br><span class="line">            gen.writeFieldName(<span class="string">&quot;size&quot;</span>);</span><br><span class="line">            gen.writeNumber(page.getSize());</span><br><span class="line">            gen.writeFieldName(<span class="string">&quot;number&quot;</span>);</span><br><span class="line">            gen.writeNumber(page.getNumber());</span><br><span class="line">            gen.writeFieldName(<span class="string">&quot;totalElements&quot;</span>);</span><br><span class="line">            gen.writeNumber(page.getTotalElements());</span><br><span class="line">            gen.writeFieldName(<span class="string">&quot;last&quot;</span>);</span><br><span class="line">            gen.writeBoolean(page.isLast());</span><br><span class="line">            gen.writeFieldName(<span class="string">&quot;totalPages&quot;</span>);</span><br><span class="line">            gen.writeNumber(page.getTotalPages());</span><br><span class="line">            gen.writeObjectField(<span class="string">&quot;sort&quot;</span>, page.getSort());</span><br><span class="line">            gen.writeFieldName(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">            gen.writeBoolean(page.isFirst());</span><br><span class="line">            gen.writeFieldName(<span class="string">&quot;numberOfElements&quot;</span>);</span><br><span class="line">            gen.writeNumber(page.getNumberOfElements());</span><br><span class="line">            gen.writeFieldName(<span class="string">&quot;content&quot;</span>);</span><br><span class="line">            serializers.defaultSerializeValue(page.getContent(),gen);</span><br><span class="line">            gen.writeEndObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="六-Conclusion"><a href="#六-Conclusion" class="headerlink" title="六.Conclusion"></a>六.Conclusion</h3><p>以上每种方法都有各自的弊端。推荐使用者优先考虑后两种方案。如果我对以上方法的理解存在偏差，或者有人对于该问题有更好的解决方案，欢迎与我讨论。</p>
<p>参考链接：</p>
<ul>
<li><a target="_blank" rel="noopener" href="http://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion">Jackson-Bidirectional Relationships</a></li>
<li><a target="_blank" rel="noopener" href="https://spring.io/blog/2014/12/02/latest-jackson-integration-improvements-in-spring">Latest Jackson integration improvements in Spring</a></li>
</ul>
</div>
            
        </div>

        <footer class="post-footer">
            
  <ul class="post-tag-list" itemprop="keywords"><li class="post-tag-list-item"><a class="post-tag-list-link" href="/tags/Hibernate/" rel="tag">Hibernate</a></li><li class="post-tag-list-item"><a class="post-tag-list-link" href="/tags/JPA/" rel="tag">JPA</a></li><li class="post-tag-list-item"><a class="post-tag-list-link" href="/tags/Jackson/" rel="tag">Jackson</a></li><li class="post-tag-list-item"><a class="post-tag-list-link" href="/tags/Spring/" rel="tag">Spring</a></li></ul>

        </footer>
    </div>
    
    
    <div class="post-nav">
  <div class="post-nav-next post-nav-item">
    
    <a href="/initial-setup-Ubuntu-16.04-server" rel="next" title="Initial Setup Ubuntu16.04 server">
        <i class="fa fa-chevron-left"></i>
        Initial Setup Ubuntu16.04 server
    </a>
    
  </div>

  <div class="post-nav-prev post-nav-item">
    
    <a href="/regular-expression-lookahead-lookbehind" rel="prev" title="正则表达式：零宽断言(lookaround)">
        正则表达式：零宽断言(lookaround) 
        <i class="fa fa-chevron-right"></i>
    </a>
    
  </div>
</div>

    

    
        <div class="comments" id="comments">
    
        <div id="disqus_thread">
            <noscript>
                Please enable JavaScript to view the
                <a target="_blank" rel="noopener" href="//disqus.com/?ref_noscript">comments powered by Disqus.</a>
            </noscript>
        </div>
    
</div>
    
</article>

                </main>
            </div>
            <div class="col-md-3">
                <aside class="side-nav">
    
    <aside class="widget" id="site-profile">
    <img src="/img/logo_brown.png">
    <h3 class="widget-title">staynoob! not stay noob!</h3>
    <div class="widget-content">
        
            
                <a href="https://github.com/noob9527" target="_blank">
                    <i class="fa fa-2x fa-github"></i>
                </a>
            
                <a href="http://weibo.com/p/1005052678297054" target="_blank">
                    <i class="fa fa-2x fa-weibo"></i>
                </a>
            
        
        
            <a href="/atom.xml" rel="alternate">
                <i class="fa fa-2x fa-rss"></i>
            </a>
        
    </div>
</aside>
    
    

<aside class="widget" id="post-toc">
    <h3 class="widget-title">文章目录</h3>
    <div class="widget-content">
        <ol class="document-nav"><li class="document-nav-item document-nav-level-3"><a class="document-nav-link" href="#%E4%B8%80-Infinite-Recursion"><span class="document-nav-text">一.Infinite Recursion</span></a></li><li class="document-nav-item document-nav-level-3"><a class="document-nav-link" href="#%E4%BA%8C-JsonIgnore"><span class="document-nav-text">二.@JsonIgnore</span></a></li><li class="document-nav-item document-nav-level-3"><a class="document-nav-link" href="#%E4%B8%89-JsonManagedReference%E4%B8%8E-JsonBackReference"><span class="document-nav-text">三.@JsonManagedReference与@JsonBackReference</span></a></li><li class="document-nav-item document-nav-level-3"><a class="document-nav-link" href="#%E5%9B%9B-JsonIdentityInfo"><span class="document-nav-text">四.@JsonIdentityInfo</span></a></li><li class="document-nav-item document-nav-level-3"><a class="document-nav-link" href="#%E4%BA%94-JsonView"><span class="document-nav-text">五.@JsonView</span></a></li><li class="document-nav-item document-nav-level-3"><a class="document-nav-link" href="#%E5%85%AD-Conclusion"><span class="document-nav-text">六.Conclusion</span></a></li></ol>
    </div>
</aside>

    
    
<aside class="widget" id="local-search">
    <h3 class="widget-title">站内搜索</h3>
    <div class="widget-content">
        <label for="local-search-input" class="sr-only">search</label>
        <input type="search" placeholder="search"
                id="local-search-input" class="form-control">
        <div id="local-search-result"></div>
    </div>
</aside>

    
    
<aside class="widget">
    <h3 class="widget-title">最新文章</h3>
    <div class="widget-content">
        <ul class="recent-posts">
            
            <li>
                <a href="/notes-on-high-performance-mysql">Notes on High Performance MySQL</a>
            </li>
            
            <li>
                <a href="/exploration-vs-exploitation">Exploration vs Exploitation</a>
            </li>
            
            <li>
                <a href="/post/2019/10/why-i-think-kotlin-is-preferable-to-java/">Why I think Kotlin is preferable to Java</a>
            </li>
            
            <li>
                <a href="/post/2019/05/when-soft-delete-meets-unique-index/">When &quot;Soft Delete&quot; Meets &quot;Unique Index&quot;</a>
            </li>
            
            <li>
                <a href="/post/2019/05/the-good-old-transaction/">The Good Old Transaction</a>
            </li>
            
            <li>
                <a href="/post/2019/03/is-distributed-lock-safe/">分布式锁真的“安全”吗？</a>
            </li>
            
            <li>
                <a href="/post/2019/03/strong-consistency-model/">(译)Strong Consistency Models</a>
            </li>
            
            <li>
                <a href="/post/2019/02/common-pitfalls-in-jpa-hibernate/">Common Pitfalls in JPA(Hibernate)</a>
            </li>
            
            <li>
                <a href="/post/2019/02/common-pitfalls-of-declarative-transaction-management-in-spring/">Common Pitfalls of Declarative Transaction Management in Spring</a>
            </li>
            
            <li>
                <a href="/post/2019/01/understanding-zombie-process/">Understanding Zombie Process</a>
            </li>
            
            <li>
                <a href="/closure-in-javascript">再谈js闭包</a>
            </li>
            
            <li>
                <a href="/btree-data-structure">B-tree数据结构</a>
            </li>
            
            <li>
                <a href="/lambda-calculus-y-combinator">lambda calculus:Y-combinator</a>
            </li>
            
            <li>
                <a href="/lambda-calculus-introduction">lambda calculus:Introduction</a>
            </li>
            
            <li>
                <a href="/salted-password-hashing">加密算法简介</a>
            </li>
            
        </ul>
    </div>
</aside>

    
    
<aside class="widget">
    <h3 class="widget-title">分类</h3>
    <div class="widget-content">
        <ul class="category-list"><li class="category-list-item"><a class="category-list-link" href="/categories/Algorithm/">Algorithm</a><span class="category-list-count">6</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/Backend/">Backend</a><span class="category-list-count">8</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/Diary/">Diary</a><span class="category-list-count">2</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/Frontend/">Frontend</a><span class="category-list-count">3</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/Functional-Programming/">Functional Programming</a><span class="category-list-count">2</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/Mathematic/">Mathematic</a><span class="category-list-count">1</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/Programming-Language/">Programming Language</a><span class="category-list-count">1</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/Security/">Security</a><span class="category-list-count">1</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/System/">System</a><span class="category-list-count">3</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E6%B0%B8%E8%BF%9C%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84%E7%BC%96%E7%A8%8B%E5%A7%BF%E5%8A%BF/">永远记不住的编程姿势</a><span class="category-list-count">2</span></li></ul>
    </div>
</aside>

    
    
<aside class="widget">
    <h3 class="widget-title">标签</h3>
    <div class="widget-content tag-cloud">
        <a href="/tags/CSS/" style="font-size: 15px;">CSS</a> <a href="/tags/Database/" style="font-size: 20px;">Database</a> <a href="/tags/Distributed-System/" style="font-size: 15px;">Distributed System</a> <a href="/tags/Hibernate/" style="font-size: 10px;">Hibernate</a> <a href="/tags/JPA/" style="font-size: 20px;">JPA</a> <a href="/tags/Jackson/" style="font-size: 10px;">Jackson</a> <a href="/tags/Java/" style="font-size: 10px;">Java</a> <a href="/tags/Javascript/" style="font-size: 10px;">Javascript</a> <a href="/tags/Kotlin/" style="font-size: 10px;">Kotlin</a> <a href="/tags/Lambda-Calculus/" style="font-size: 15px;">Lambda Calculus</a> <a href="/tags/Linux/" style="font-size: 20px;">Linux</a> <a href="/tags/SQL/" style="font-size: 10px;">SQL</a> <a href="/tags/Sort/" style="font-size: 20px;">Sort</a> <a href="/tags/Spring/" style="font-size: 20px;">Spring</a> <a href="/tags/UNIX/" style="font-size: 10px;">UNIX</a> <a href="/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/" style="font-size: 15px;">编程技巧</a>
    </div>
</aside>

    
    
<aside class="widget">
    <h3 class="widget-title">归档</h3>
    <div class="widget-content">
        <ul class="archive-list"><li class="archive-list-item"><a class="archive-list-link" href="/archives/2024/06/">June 2024</a><span class="archive-list-count">2</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2019/10/">October 2019</a><span class="archive-list-count">1</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2019/05/">May 2019</a><span class="archive-list-count">2</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2019/03/">March 2019</a><span class="archive-list-count">2</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2019/02/">February 2019</a><span class="archive-list-count">2</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2019/01/">January 2019</a><span class="archive-list-count">1</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2017/07/">July 2017</a><span class="archive-list-count">1</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2017/06/">June 2017</a><span class="archive-list-count">1</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2017/03/">March 2017</a><span class="archive-list-count">3</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2017/02/">February 2017</a><span class="archive-list-count">1</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2017/01/">January 2017</a><span class="archive-list-count">2</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2016/12/">December 2016</a><span class="archive-list-count">1</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2016/09/">September 2016</a><span class="archive-list-count">1</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2016/06/">June 2016</a><span class="archive-list-count">1</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2016/05/">May 2016</a><span class="archive-list-count">5</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2016/04/">April 2016</a><span class="archive-list-count">3</span></li></ul>
    </div>
</aside>

    
</aside>
            </div>
        </div>
    </div>
    
    <footer id="footer">
    <div id="footer-info">
        &copy; 
        
        
            2015 - 
        
        <span itemprop="copyrightYear">2024</span>
        noob9527<br>
        Powered by <a href="/about">xy</a>
        .
        Theme Noob by <a href="/about">xy</a>
    </div>
</footer>

    
    

    

    
          <script type="text/javascript">
              var disqus_config = function () {
                  this.page.url = 'https://blog.staynoob.cn/jackson-serialize-bi-directional-relationship-infinite-recursion';
                  this.page.identifier = '/jackson-serialize-bi-directional-relationship-infinite-recursion';
                  this.page.title = 'Jackson序列化双向关联映射的四种方法';
              };
              var d = document, s = d.createElement('script');
              s.src = 'https://staynoob.disqus.com/embed.js';
              s.setAttribute('data-timestamp', '' + +new Date());
              (d.head || d.body).appendChild(s);
          </script>
    

    
  <script type="text/javascript">
    var _hmt = _hmt || [];
    (function() {
      var hm = document.createElement("script");
      hm.src = "//hm.baidu.com/hm.js?855dd1a156248c0c337788236167c870";
      var s = document.getElementsByTagName("script")[0];
      s.parentNode.insertBefore(hm, s);
    })();
  </script>


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-76868752-1', 'auto');
  ga('send', 'pageview');
</script>


  <script type="text/javascript">
    (function() {
      var hm = document.createElement("script");
      hm.src = "//tajs.qq.com/stats?sId=55612284";
      var s = document.getElementsByTagName("script")[0];
      s.parentNode.insertBefore(hm, s);
    })();
  </script>


    
<script>
    (function(){
        var bp = document.createElement('script');
        var curProtocol = window.location.protocol.split(':')[0];
        if (curProtocol === 'https') {
            bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';
        }
        else {
            bp.src = 'http://push.zhanzhang.baidu.com/push.js';
        }
        var s = document.getElementsByTagName("script")[0];
        s.parentNode.insertBefore(bp, s);
    })();
</script>

    
  <!-- <script type="text/x-mathjax-config">
    MathJax.Hub.Config({
      tex2jax: {
        inlineMath: [ ['$','$'], ["\\(","\\)"]  ],
        processEscapes: true,
        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
      }
    });
  </script>
  <script type="text/x-mathjax-config">
    MathJax.Hub.Queue(function() {
      var all = MathJax.Hub.getAllJax(), i;
      for (i=0; i < all.length; i += 1) {
        all[i].SourceElement().parentNode.className += ' has-jax';
      }
    });
  </script>
  <script type="text/javascript" src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script> -->
  <!-- upgrade to mathjax 3 -->
  <!-- see https://www.mathjax.org/#gettingstarted -->
  <script>
  MathJax = {
    tex: {
      inlineMath: [['$', '$'], ['\\(', '\\)']]
    }
  };
  </script>
  <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
  <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>

</body>
</html>
