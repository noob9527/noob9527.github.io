<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/>





<title>加密算法简介 - 许炎的个人博客</title>


    <meta name="keywords" content="github, 技术博客, web开发, fontend">


<meta name="description" content="最近听到一个来公司面试的码农说他使用Base64加密数据（Base64是一种编码格式，在编码解码计算过程中不会丢失信息量。通俗点说就相当于把“你好”加密成了“hello”），这跟明文没什么区别，如果一个hacker有本事截获你的数据，你不可能指望他不会解码Base64。这篇文章希望能分享一些关于加密的常识。  一.散列函数(Hash function)1.常见误区关于加密算法，最常见的一个误区在">
<meta property="og:type" content="article">
<meta property="og:title" content="加密算法简介">
<meta property="og:url" content="https://blog.staynoob.cn/salted-password-hashing">
<meta property="og:site_name" content="NOOB">
<meta property="og:description" content="最近听到一个来公司面试的码农说他使用Base64加密数据（Base64是一种编码格式，在编码解码计算过程中不会丢失信息量。通俗点说就相当于把“你好”加密成了“hello”），这跟明文没什么区别，如果一个hacker有本事截获你的数据，你不可能指望他不会解码Base64。这篇文章希望能分享一些关于加密的常识。  一.散列函数(Hash function)1.常见误区关于加密算法，最常见的一个误区在">
<meta property="og:locale">
<meta property="og:image" content="https://blog.staynoob.cn/img/salted-password-hashing.jpg">
<meta property="article:published_time" content="2017-03-05T11:25:50.000Z">
<meta property="article:modified_time" content="2024-06-29T11:52:49.161Z">
<meta property="article:author" content="noob9527">
<meta property="article:tag" content="github, 技术博客, web开发, fontend">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://blog.staynoob.cn/img/salted-password-hashing.jpg">


    <link rel="shortcut icon" type="image/x-icon" href="/favicon.ico " />
    <link rel="Bookmark" type="image/x-icon" href="/favicon.ico " />
    <link rel="icon" type="image/x-icon" href="/favicon.ico " />



<meta name="google-site-verification" content="9GCG5tynfuvxF_9_xHvo8tvc7CqHeqKMZQqda25rDPs" />


<meta name="baidu-site-verification" content="IVBrfkvovZ" />



<link rel="alternative" href="/atom.xml" title="NOOB" type="application/atom+xml">



<script src="/vendors/jquery/jquery.js"></script>
<script src="/vendors/bootstrap/js/bootstrap.js"></script>
<script src="/js/script.js"></script>


<link rel="stylesheet" href="/vendors/font-awesome/css/font-awesome.min.css">


<link rel="stylesheet" href="/css/style.css">


<script type="text/javascript" id="hexo.configuration">
  var CONFIG = {
    search: {
      path: '/search.xml'
    }  
  };
</script>
<meta name="generator" content="Hexo 6.3.0"></head>
<body>
    <header id="site-nav">
    <div id="banner"></div>
    <nav class="navbar navbar-inverse">
        <div class="container-fluid">
            
             <!-- social link-->
            <div class="social-link">
                <ul class="nav navbar-nav navbar-left">
                    
                        
                            <li><a href="https://github.com/noob9527" target="_blank">
                                <i class="fa fa-2x fa-github"></i>
                            </a></li>
                        
                            <li><a href="http://weibo.com/p/1005052678297054" target="_blank">
                                <i class="fa fa-2x fa-weibo"></i>
                            </a></li>
                        
                    
                    
                        <li><a href="/atom.xml" rel="alternate">
                            <i class="fa fa-2x fa-rss"></i>
                        </a></li>
                    
                </ul>
            </div>
            
            <div class="navbar-header">
                <!--toggle button-->
                <button class="navbar-toggle collapsed" data-toggle="collapse" 
                        data-target="#navbar-link" aria-expanded="false">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>

                <!--brand-->
                <a href="/" class="navbar-brand">
                    <span>NOOB</span>
                </a>
            </div>
            
            <!--link-->
            <div class="collapse navbar-collapse" id="navbar-link">
                <ul class="nav navbar-nav navbar-right">
                    
                        <li>
                            <a href="/" rel="section">
                                
                                    <i class="fa fa-home fa-fw"></i>
                                
                                首页
                            </a>
                        </li>
                    
                        <li>
                            <a href="/archives" rel="section">
                                
                                    <i class="fa fa-archive fa-fw"></i>
                                
                                归档
                            </a>
                        </li>
                    
                        <li>
                            <a href="/about" rel="section">
                                
                                    <i class="fa fa-user fa-fw"></i>
                                
                                关于
                            </a>
                        </li>
                    
                </ul>
            </div>
        </div>
    </nav>
</header>

    
    <div class="site-content container-fluid">
        <div class="row">
            <div class="col-md-9">
                <main>
                    <article id="post-加密算法简介"
         class="post post-type-post" itemscope itemprop="blogPost">

    <div class="post-inner">
        <!-- title -->
        
        <header class="post-header">
            <h1 itemprop="name">
    
      加密算法简介
    
</h1>
        </header>
        

        <!-- meta data -->
        <div class="post-meta">
            <span class="post-date">
    <span class="post-meta-item-icon">
      <i class="fa fa-calendar"></i>
    </span>
    <span class="post-meta-item-text">发表于</span>
    <time itemprop="datePublished" datetime="2017-03-05T19:25:50+08:00" 
          content="2017-03-05">
        2017-03-05
    </time>
</span>
            
<span class="post-category">
    &nbsp; | &nbsp;
    <span class="post-meta-item-icon">
        <i class="fa fa-folder-o"></i>
    </span>
    <span class="post-meta-item-text">分类于</span>
    <span itemprop="about" itemscope itemtype="https://schema.org/Thing">
        <a class="article-category-link" href="/categories/Security/">Security</a>
    </span>
</span>


            
    

        </div>

        <!-- gallery-->
        
        <div class="post-gallery">
              <div class="post-gallery-photos">
    
        
          <!--<a class="post-gallery-img fancybox" href="/img/salted-password-hashing.jpg" rel="gallery_cly05clip0015iweygock0k3p">-->
            <img src="/img/salted-password-hashing.jpg" itemprop="image">
          <!--</a>-->
        
    
  </div>

        </div>
        

        <!-- entry -->
        <div class="post-entry" itemprop="postBody">
            
            <!--文章内容-->
            <div class="post-content"><blockquote>
<p>最近听到一个来公司面试的码农说他使用Base64加密数据（Base64是一种编码格式，在编码解码计算过程中不会丢失信息量。通俗点说就相当于把“你好”加密成了“hello”），这跟明文没什么区别，如果一个hacker有本事截获你的数据，你不可能指望他不会解码Base64。这篇文章希望能分享一些关于加密的常识。</p>
</blockquote>
<h3 id="一-散列函数-Hash-function"><a href="#一-散列函数-Hash-function" class="headerlink" title="一.散列函数(Hash function)"></a>一.散列函数(Hash function)</h3><h4 id="1-常见误区"><a href="#1-常见误区" class="headerlink" title="1.常见误区"></a>1.常见误区</h4><p>关于加密算法，最常见的一个误区在于认为MD5,SHA1,SHA256就是加密算法，其实它们只是用来实现加密算法的一部分，更准确的说，它们只是散列函数，就像java中随处可见的<strong>hashCode</strong>方法一样，它们的共同点在于都要尽可能避免冲突（两个不同的输入却有相同的输出），而区别在于java中的hashCode方法用于提高散列表的性能，因此主要关注于计算速度而不是安全。<br>第二个常见误区在于，大家都觉得MD5,SHA1之所以安全，是因为它们计算过程不可逆，举个例子:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MD5(&quot;hello&quot;) = 5D41402ABC4B2A76B9719D911017C592</span><br></pre></td></tr></table></figure><br>对MD5散列函数输入字符串&quot;hello&quot;，总是可以得到<em>5D41402ABC4B2A76B9719D911017C592</em>，但<strong>现在没有以后也不可能有</strong>任何方法将<em>5D41402ABC4B2A76B9719D911017C592</em>解密为&quot;hello&quot;（目前所有所谓的解密都是基于猜测）。乍一看这很神奇，在解释它之前，先来看下维基百科上对散列函数的定义：</p>
<blockquote>
<p>散列函数是一种输入<strong>任意</strong>大小的数据，返回固定大小的值的函数</p>
</blockquote>
<p>继续以MD5为例，对它输入任意大小的数据，它的返回值都是128位(16字节)。假如这个过程可逆，那么无损压缩就不再有极限，也就意味着给你一张软盘，你就能存储全世界！换句话说，按照上面的定义，<strong>根本不存在可逆的散列函数</strong>。看到这里你可能依然很困惑，对于任意大小的数据散列不可逆也许比较好理解，但是&quot;hello&quot;明明只有5个字符，为什么也不可逆呢？专业一点解释就是，在计算过程中丢掉一部分信息量即可（对于信息的量化，可以参考我这篇文章<a href="http://blog.staynoob.cn/post/2016/05/shannon-mathematical-theory-of-communication/">香农信息论与回答老鼠喝药问题的正确姿势</a>），草根一点的解释是，你只要让你的函数对于不同的输入，可以得到相同的输出即可。比如f(x)=x^2就是一个不可逆的函数，因为已知f(x)=1，没办法知道x到底是正1还是负1。</p>
<h4 id="2-散列冲突-Hash-collision"><a href="#2-散列冲突-Hash-collision" class="headerlink" title="2.散列冲突(Hash collision)"></a>2.散列冲突(Hash collision)</h4><p>对于任意输入数据，经过散列函数计算后得到的散列值，又称为数据指纹（fingerprint）或摘要(digest)，它就像人类的指纹一样，你不可能通过一个人的指纹而了解这个人的全部信息，但是你总是可以快速的取到一个人的指纹。并且很难重复，如果两个不同的输入数据有着同样的散列值，则称为散列冲突。正常情况下假设一个结果分布完全均匀的散列函数输出128位的散列值，那么发生冲突的概率大概在$1/2^{128}$这个数量级，这几乎等同于不可能。但人们可以根据散列函数的实现过程，设计算法来查找冲突值，也就是常说的碰撞攻击(collision attack)。加密用散列函数最大的设计难点，就在于要让别人即使知道了该函数的所有实现细节，也无法找到高效的碰撞攻击算法。</p>
<h4 id="3-过时的散列函数-Deprecated-hash-function"><a href="#3-过时的散列函数-Deprecated-hash-function" class="headerlink" title="3.过时的散列函数(Deprecated hash function)"></a>3.过时的散列函数(Deprecated hash function)</h4><p>2004年山东大学的王小云教授宣布<strong>攻破MD4,MD5</strong>(<a target="_blank" rel="noopener" href="http://eprint.iacr.org/2004/199.pdf">Collisions for Hash Functions</a>)，2017年（也就是最近）荷兰密码学研究小组与Google宣布<strong>攻破SHA-1</strong>(<a target="_blank" rel="noopener" href="https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html">Announcing the first SHA1 collision</a>，<a target="_blank" rel="noopener" href="http://shattered.it/">shattered</a>)，下图解释了对这些函数查找散列冲突所需的计算量：<br><img src="/img/content/hash-collision-computation.jpg" alt="hash-collision-computation"><br>可以看到使用google最近研究的算法破解SHA-1需要<strong>110</strong>块GPU一年的计算量，虽然这个数字看起来非常大，不过依然比暴力算法快了十万倍，因此Google已将SHA-1算法标记为过时(deprecated)的（顺便提一句，linus(linux,git的开发者)最近也受到这条新闻的压力，发文宣布<a target="_blank" rel="noopener" href="https://plus.google.com/+LinusTorvalds/posts/7tp2gYWQugL">更新git中用到的SHA-1算法</a>）。当然上图还有一点值得注意，前文提到的MD5算法，对它进行碰撞攻击只需要消耗一台智能手机<strong>30秒</strong>的计算量。</p>
<span id="more"></span>
<h3 id="二-如何攻击加密算法"><a href="#二-如何攻击加密算法" class="headerlink" title="二.如何攻击加密算法"></a>二.如何攻击加密算法</h3><h4 id="1-暴力算法-Brute-force-attacks"><a href="#1-暴力算法-Brute-force-attacks" class="headerlink" title="1.暴力算法(Brute force attacks)"></a>1.暴力算法(Brute force attacks)</h4><p>已知密码的散列值（数据指纹），和它的加密算法，如何破解该密码?最简单的办法就是穷举该密码所有可能的字符组合，对每个结果调用加密算法，然后与已知的散列值比对。这种办法需要消耗巨大的计算量，但它的好处是总会找到该密码的散列冲突值。举例来说，假设某地警察局获取了罪犯留在犯罪现场的指纹，不可能仅根据该指纹就解析出罪犯的所有信息。于是警察想了一个办法，让当地所有人到警察局一一采集指纹进行比对。这就是暴力算法。</p>
<h4 id="2-字典攻击-Dictionary-attacks"><a href="#2-字典攻击-Dictionary-attacks" class="headerlink" title="2.字典攻击(Dictionary attacks)"></a>2.字典攻击(Dictionary attacks)</h4><p>字典攻击指的是先使用一个文件，记录常用来作为密码的单词，这些单词可以从已经攻破的生产环境数据库提取，或者使用一些机器学习算法生成。然后使用这些词的散列值与已知密码的散列值进行比对来破解密码。继续用上面的例子，字典攻击就类似于警察局先在所有人中挑出一部分有犯罪记录的人，只采集这些人的指纹来查找罪犯。没有任何方法可以防御暴力攻击与字典攻击，换句话说如果一个加密算法是安全的，那么它只能被暴力算法和字典攻击来破解。</p>
<h4 id="3-查找表-Lookup-Tables"><a href="#3-查找表-Lookup-Tables" class="headerlink" title="3.查找表(Lookup Tables)"></a>3.查找表(Lookup Tables)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Searching: 5f4dcc3b5aa765d61d8327deb882cf99: FOUND: password5</span><br><span class="line">Searching: 6cbe615c106f422d23669b610b564800:  not in database</span><br><span class="line">Searching: 630bf032efe4507f2c57b280995925a9: FOUND: letMEin12</span><br><span class="line">Searching: 386f43fab5d096a7a66d67c8f213e5ec: FOUND: mcd0nalds</span><br><span class="line">Searching: d5ec75d5fe70d428685510fae36492d9: FOUND: p@ssw0rd!</span><br></pre></td></tr></table></figure>
<p>查找表是一种非常有效的破解常用散列函数的方法，它的思路就是事先计算好常见密码的散列值并存在数据库中（牺牲空间复杂度来降低时间复杂度）。好的查找表实现即便预先存储了几十亿对散列值，依然能达到每秒查找上百个散列值的效率。查找表相当于警察将有犯罪记录的人的指纹保存在数据库中，之后拿到犯罪现场的指纹，直接先从数据库中搜索比对。目前很多在线提供密码破解的网站都是基于查找表实现的。</p>
<h4 id="4-反向查找表-Reverse-Lookup-Tables"><a href="#4-反向查找表-Reverse-Lookup-Tables" class="headerlink" title="4.反向查找表(Reverse Lookup Tables)"></a>4.反向查找表(Reverse Lookup Tables)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Searching for hash(apple) in users&#x27; hash list...     : Matches [alice3, 0bob0, charles8]</span><br><span class="line">Searching for hash(blueberry) in users&#x27; hash list... : Matches [usr10101, timmy, john91]</span><br><span class="line">Searching for hash(letmein) in users&#x27; hash list...   : Matches [wilson10, dragonslayerX, joe1984]</span><br><span class="line">Searching for hash(s3cr3t) in users&#x27; hash list...    : Matches [bruce19, knuth1337, john87]</span><br><span class="line">Searching for hash(z@29hjja) in users&#x27; hash list...  : No users used this password</span><br></pre></td></tr></table></figure>
<p>顾名思义，该方法根据要破解的用户表来建立查找表，比如说我现在拿到了一张用户表，其中每个用户的密码都是散列值。我可以先遍历这张表，将其存到一个HashMap结构中，使用密码散列值作为key，使用用户名数组作为value。之后我可以随便猜一些常用密码比如123456，在HashMap中查找键值<strong>Hash(123456)</strong>就能得到所有密码是123456的用户名。</p>
<h4 id="5-彩虹表-Rainbow-Tables"><a href="#5-彩虹表-Rainbow-Tables" class="headerlink" title="5.彩虹表(Rainbow Tables)"></a>5.彩虹表(Rainbow Tables)</h4><p>假设有一个散列函数H，和一个有限的密码集合P，目标是构建一张表，使得对于任意散列值h，可以找到P中对应的元素p满足<code>H(p)=h</code>，或者可以判定该p在P集合中不存在。最简单的实现是计算P中所有元素的散列值并存储下来。这样就能得到一个查找表，这种方法的问题在于假如P集合非常大，则需要耗费巨大的存储空间。<br>另一种思路是引入一个归约函数R(reduction function)，这个归约函数输入一个散列值h，返回一个字符串（并不要求H(p)=h），通过交替应用散列函数H与归约函数R，可以形成一个由密码与散列值组成的散列链。举个栗子，如果P是所有小写字母与数字的集合，散列值为32位，那么一个散列链大概长这样：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaaaaa -&gt; 281DAF40 -&gt; shfnyd -&gt; 920ECF10 -&gt; kiebgt</span><br></pre></td></tr></table></figure><br>我们可以选定P中的一个集合，计算多条这样的散列链，并且约定每条散列链的长度k。之后只保存散列链的起点与终点，如上例中的aaaaaa与kiebgt。现在假设我们要查找一个散列值h对应的p，可以先对h调用归约函数R，之后同样是交替调用H与R，直到中途得到一个值与我们存储的一个终点相匹配。再利用该终点与对应的起点重新生成散列链，该链中就很有可能包含散列值h，于是可以立即得到h散列前的值p。<br>举例来说，假设我们要查找散列值920ECF10对应的密码p，先对它调用归约函数得到kiebgt，之后发现该结果是已保存散列链的终点。于是利用该终点与对应的起点aaaaaa重新计算得到<strong>aaaaaa -&gt; 281DAF40 -&gt; shfnyd -&gt; 920ECF10 -&gt; kiebgt</strong>。于是得到了920ECF10散列前的值<strong>shfnyd</strong>。<br>上面演示的是散列链在理想情况下的工作方式，实际应用中还会碰到很多问题。其中有一个严重的缺陷在于如果两条链中的任何两个点碰撞（有同样的值），那它们后续的所有点都将重合，这将浪费很大的计算量。彩虹表就是用来解决该问题的，它采用一系列归约函数$R_1,R_2...R_k$来代替上面的归约函数R。最终实现如果两个散列链发生碰撞，那它们的终点一定相同。这样就可以依据终点来删除重复的散列链，从而大幅降低了碰撞的次数。<br>简而言之，暴力算法需要计算每一个可能的猜测，意味着消耗大量的时间。查找表需要保存每一个可能的猜测，意味着消耗大量的存储。彩虹表是处于它们之间的一个折中的解决方案。</p>
<h3 id="三-关于加盐-salt"><a href="#三-关于加盐-salt" class="headerlink" title="三.关于加盐(salt)"></a>三.关于加盐(salt)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hash(&quot;hello&quot;)                    = 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824</span><br><span class="line">hash(&quot;hello&quot; + &quot;QxLUF1bgIAdeQX&quot;) = 9e209040c863f84a31e719795b2577523954739fe5ed3b58a75cff2127075ed1</span><br><span class="line">hash(&quot;hello&quot; + &quot;bv5PehSMfV11Cd&quot;) = d1d3ec2e6f20fd420d50e2642992841d8338a314b8ea157c9e18477aaef226ab</span><br><span class="line">hash(&quot;hello&quot; + &quot;YYLmfY6IehjZMQ&quot;) = a49670c3c18b9e079b9cfaf51634f563dc8ae3070db2c4a8544305df1b60f007</span><br></pre></td></tr></table></figure>
<p>由于散列函数对同样的密码总是会得到同样的散列值，因此查找表与彩虹表才能够起效。如果每次在密码散列之前，对该密码添加一个随机字符串。就可以有效的防止这种攻击，而这个随机字符串就称为盐值(salt)。如上面的例子，在对hello进行散列之前添加一个随机的盐值，就可以保证每次加密hello都能得到不同的结果。但这样一来每次生成密码散列值后，还需要保存对应的盐值，否则之后当用户输入密码登陆时，就没办法验证该密码的正确性了。下面列一些关于盐值的常识：</p>
<ul>
<li>盐值没必要保密<br>  由于攻击者事先不知道盐值，就没办法事先计算查找表与彩虹表，又因为相同密码每次得到的散列值都不一样，因此反向查找表也没办法起效。这就是盐值存在的目的。使用任意足够长的随机字符串都可以达到该目的，而试图将该字符串保密则完全是多此一举。<br>  一般来说可以把盐值保存在用户表中，或者直接与密码的散列值保存在一起就可以了。</li>
<li>不要重用盐值<br>  一个常见的错误是只随机生成一次盐值，之后就所有密码散列都重用该盐值，或者干脆将盐值作为常量写死在程序中。这样一来攻击者可以根据该盐值来计算查找表与彩虹表。同时由于两个相同的密码还是会得到相同的散列值。反向查找表也依然有效，攻击者只要在每次猜测密码后，将该盐值加到猜测的密码上就可以了。<br>  正确的做法是每次要生成密码散列值的时候，都为该密码生成一个新的随机的盐值。</li>
<li>不要使用太短的盐值<br>  如果盐值太短，攻击者依然可以通过枚举所有可能盐值的方式来构建查找表，举例来说如果盐值只包含三个ASCII字符，那么一共只有95^3种可能的盐值。如果一个查找表包含1MB最常见的密码，那么一个包含所有盐值的查找表大概是837GB，考虑现在花300来块就能买个1TB的硬盘，这个数值真的不算大。<br>  选择多长的盐值合适？一个简单的方法是跟散列值一样长就好，比如说SHA256的输出结果为256bits(32字节)，那么使用32字节的盐值就可以了。</li>
</ul>
<h3 id="四-算得慢一点！"><a href="#四-算得慢一点！" class="headerlink" title="四.算得慢一点！"></a>四.算得慢一点！</h3><p>前面提到使用暴力算法来查找SHA-1散列函数的冲突值，需要耗费数千万块GPU一年的运算量。这可能会让你产生一些错觉，因为它是不限定输入的。换句话说假如限定输入只由6位数字与小写字母组成，那么一块GPU每秒可以破解数十亿个这样的输入。对于实际场景中一些比较复杂的密码，其计算效率也不会低于每秒一个。这也解释了为什么说SHA-256,SHA-512是安全的散列函数，但不是安全的加密算法。因为使用暴力算法破解这些安全的散列函数一样是非常高效的。<br>解决的办法是使用一种称为<a target="_blank" rel="noopener" href="https://en.wikipedia.org/wiki/Key_stretching">key stretching</a>的技术，它的用途就是让散列函数变慢。以bcrypt为例，该算法接受一个安全因子(security factor)为参数，使用该参数来决定密码散列过程有多慢。通过调整该参数，可以将散列函数计算时间控制在0.3到0.5秒之间。这样的时间消耗对用户来说几乎感受不到。但是对于那些试图通过暴力算法来攻击系统的人来说，是慢得无法忍受的。举例来说，假设密码只由6位数字与小写字母组成，一台现代PC使用MD5算法枚举完所有可能性所花的时间不超过30秒。但是如果你将一次散列函数的计算时间控制在0.5秒左右，那么将密码枚举完大概要30年。</p>
<h3 id="五-Sample"><a href="#五-Sample" class="headerlink" title="五.Sample"></a>五.Sample</h3><p>bcrypt是目前比较成熟的一种加密算法，下面通过分析一个它的散列值，来看看它涉及到上文提到的哪些要点。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$2a$10$N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68LJZdL17lhWy</span><br></pre></td></tr></table></figure><br>该散列值格式称为Modular Crypt Format，其中包括如下内容：</p>
<ul>
<li>id:2a<br>  2a是一个标识符，用于指示用到的散列函数，如1表示MD5，5表示SHA-256</li>
<li>param:10<br>  这里的10，就是上面提到的安全因子。该值越大，表示用于生成该散列值的函数运行速度越慢。</li>
<li>salt:N9qo8uLOickgx2ZMRZoMye<br>  128位盐值，使用Base64编码为22个字符</li>
<li>hash:IjZAgcfl7p92ldGxad68LJZdL17lhWy<br>  实际密码与盐值共同散列后的结果，占184位，使用Base64编码为31个字符</li>
</ul>
<p>最后，这些常识只能帮你鉴别哪些加密不安全，或者说不够安全。了解了这些内容并不意味着你可以在生产环境中使用你自己写的加密算法，本着对用户负责的态度，应该始终选择经过考验的成熟算法。</p>
<p>参考链接：</p>
<ul>
<li><a target="_blank" rel="noopener" href="https://crackstation.net/hashing-security.htm">hashing-security</a></li>
<li><a target="_blank" rel="noopener" href="https://en.wikipedia.org/wiki/Bcrypt">Bcrypt</a></li>
<li><a target="_blank" rel="noopener" href="https://en.wikipedia.org/wiki/Rainbow_table">rainbow table</a></li>
</ul>
</div>
            
        </div>

        <footer class="post-footer">
            
        </footer>
    </div>
    
    
    <div class="post-nav">
  <div class="post-nav-next post-nav-item">
    
    <a href="/bash-shortcuts" rel="next" title="Bash小技巧">
        <i class="fa fa-chevron-left"></i>
        Bash小技巧
    </a>
    
  </div>

  <div class="post-nav-prev post-nav-item">
    
    <a href="/lambda-calculus-introduction" rel="prev" title="lambda calculus:Introduction">
        lambda calculus:Introduction 
        <i class="fa fa-chevron-right"></i>
    </a>
    
  </div>
</div>

    

    
        <div class="comments" id="comments">
    
        <div id="disqus_thread">
            <noscript>
                Please enable JavaScript to view the
                <a target="_blank" rel="noopener" href="//disqus.com/?ref_noscript">comments powered by Disqus.</a>
            </noscript>
        </div>
    
</div>
    
</article>

                </main>
            </div>
            <div class="col-md-3">
                <aside class="side-nav">
    
    <aside class="widget" id="site-profile">
    <img src="/img/logo_brown.png">
    <h3 class="widget-title">staynoob! not stay noob!</h3>
    <div class="widget-content">
        
            
                <a href="https://github.com/noob9527" target="_blank">
                    <i class="fa fa-2x fa-github"></i>
                </a>
            
                <a href="http://weibo.com/p/1005052678297054" target="_blank">
                    <i class="fa fa-2x fa-weibo"></i>
                </a>
            
        
        
            <a href="/atom.xml" rel="alternate">
                <i class="fa fa-2x fa-rss"></i>
            </a>
        
    </div>
</aside>
    
    

<aside class="widget" id="post-toc">
    <h3 class="widget-title">文章目录</h3>
    <div class="widget-content">
        <ol class="document-nav"><li class="document-nav-item document-nav-level-3"><a class="document-nav-link" href="#%E4%B8%80-%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0-Hash-function"><span class="document-nav-text">一.散列函数(Hash function)</span></a><ol class="document-nav-child"><li class="document-nav-item document-nav-level-4"><a class="document-nav-link" href="#1-%E5%B8%B8%E8%A7%81%E8%AF%AF%E5%8C%BA"><span class="document-nav-text">1.常见误区</span></a></li><li class="document-nav-item document-nav-level-4"><a class="document-nav-link" href="#2-%E6%95%A3%E5%88%97%E5%86%B2%E7%AA%81-Hash-collision"><span class="document-nav-text">2.散列冲突(Hash collision)</span></a></li><li class="document-nav-item document-nav-level-4"><a class="document-nav-link" href="#3-%E8%BF%87%E6%97%B6%E7%9A%84%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0-Deprecated-hash-function"><span class="document-nav-text">3.过时的散列函数(Deprecated hash function)</span></a></li></ol></li><li class="document-nav-item document-nav-level-3"><a class="document-nav-link" href="#%E4%BA%8C-%E5%A6%82%E4%BD%95%E6%94%BB%E5%87%BB%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95"><span class="document-nav-text">二.如何攻击加密算法</span></a><ol class="document-nav-child"><li class="document-nav-item document-nav-level-4"><a class="document-nav-link" href="#1-%E6%9A%B4%E5%8A%9B%E7%AE%97%E6%B3%95-Brute-force-attacks"><span class="document-nav-text">1.暴力算法(Brute force attacks)</span></a></li><li class="document-nav-item document-nav-level-4"><a class="document-nav-link" href="#2-%E5%AD%97%E5%85%B8%E6%94%BB%E5%87%BB-Dictionary-attacks"><span class="document-nav-text">2.字典攻击(Dictionary attacks)</span></a></li><li class="document-nav-item document-nav-level-4"><a class="document-nav-link" href="#3-%E6%9F%A5%E6%89%BE%E8%A1%A8-Lookup-Tables"><span class="document-nav-text">3.查找表(Lookup Tables)</span></a></li><li class="document-nav-item document-nav-level-4"><a class="document-nav-link" href="#4-%E5%8F%8D%E5%90%91%E6%9F%A5%E6%89%BE%E8%A1%A8-Reverse-Lookup-Tables"><span class="document-nav-text">4.反向查找表(Reverse Lookup Tables)</span></a></li><li class="document-nav-item document-nav-level-4"><a class="document-nav-link" href="#5-%E5%BD%A9%E8%99%B9%E8%A1%A8-Rainbow-Tables"><span class="document-nav-text">5.彩虹表(Rainbow Tables)</span></a></li></ol></li><li class="document-nav-item document-nav-level-3"><a class="document-nav-link" href="#%E4%B8%89-%E5%85%B3%E4%BA%8E%E5%8A%A0%E7%9B%90-salt"><span class="document-nav-text">三.关于加盐(salt)</span></a></li><li class="document-nav-item document-nav-level-3"><a class="document-nav-link" href="#%E5%9B%9B-%E7%AE%97%E5%BE%97%E6%85%A2%E4%B8%80%E7%82%B9%EF%BC%81"><span class="document-nav-text">四.算得慢一点！</span></a></li><li class="document-nav-item document-nav-level-3"><a class="document-nav-link" href="#%E4%BA%94-Sample"><span class="document-nav-text">五.Sample</span></a></li></ol>
    </div>
</aside>

    
    
<aside class="widget" id="local-search">
    <h3 class="widget-title">站内搜索</h3>
    <div class="widget-content">
        <label for="local-search-input" class="sr-only">search</label>
        <input type="search" placeholder="search"
                id="local-search-input" class="form-control">
        <div id="local-search-result"></div>
    </div>
</aside>

    
    
<aside class="widget">
    <h3 class="widget-title">最新文章</h3>
    <div class="widget-content">
        <ul class="recent-posts">
            
            <li>
                <a href="/notes-on-high-performance-mysql">Notes on High Performance MySQL</a>
            </li>
            
            <li>
                <a href="/exploration-vs-exploitation">Exploration vs Exploitation</a>
            </li>
            
            <li>
                <a href="/post/2019/10/why-i-think-kotlin-is-preferable-to-java/">Why I think Kotlin is preferable to Java</a>
            </li>
            
            <li>
                <a href="/post/2019/05/when-soft-delete-meets-unique-index/">When &quot;Soft Delete&quot; Meets &quot;Unique Index&quot;</a>
            </li>
            
            <li>
                <a href="/post/2019/05/the-good-old-transaction/">The Good Old Transaction</a>
            </li>
            
            <li>
                <a href="/post/2019/03/is-distributed-lock-safe/">分布式锁真的“安全”吗？</a>
            </li>
            
            <li>
                <a href="/post/2019/03/strong-consistency-model/">(译)Strong Consistency Models</a>
            </li>
            
            <li>
                <a href="/post/2019/02/common-pitfalls-in-jpa-hibernate/">Common Pitfalls in JPA(Hibernate)</a>
            </li>
            
            <li>
                <a href="/post/2019/02/common-pitfalls-of-declarative-transaction-management-in-spring/">Common Pitfalls of Declarative Transaction Management in Spring</a>
            </li>
            
            <li>
                <a href="/post/2019/01/understanding-zombie-process/">Understanding Zombie Process</a>
            </li>
            
            <li>
                <a href="/closure-in-javascript">再谈js闭包</a>
            </li>
            
            <li>
                <a href="/btree-data-structure">B-tree数据结构</a>
            </li>
            
            <li>
                <a href="/lambda-calculus-y-combinator">lambda calculus:Y-combinator</a>
            </li>
            
            <li>
                <a href="/lambda-calculus-introduction">lambda calculus:Introduction</a>
            </li>
            
            <li>
                <a href="/salted-password-hashing">加密算法简介</a>
            </li>
            
        </ul>
    </div>
</aside>

    
    
<aside class="widget">
    <h3 class="widget-title">分类</h3>
    <div class="widget-content">
        <ul class="category-list"><li class="category-list-item"><a class="category-list-link" href="/categories/Algorithm/">Algorithm</a><span class="category-list-count">6</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/Backend/">Backend</a><span class="category-list-count">8</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/Diary/">Diary</a><span class="category-list-count">2</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/Frontend/">Frontend</a><span class="category-list-count">3</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/Functional-Programming/">Functional Programming</a><span class="category-list-count">2</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/Mathematic/">Mathematic</a><span class="category-list-count">1</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/Programming-Language/">Programming Language</a><span class="category-list-count">1</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/Security/">Security</a><span class="category-list-count">1</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/System/">System</a><span class="category-list-count">3</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E6%B0%B8%E8%BF%9C%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84%E7%BC%96%E7%A8%8B%E5%A7%BF%E5%8A%BF/">永远记不住的编程姿势</a><span class="category-list-count">2</span></li></ul>
    </div>
</aside>

    
    
<aside class="widget">
    <h3 class="widget-title">标签</h3>
    <div class="widget-content tag-cloud">
        <a href="/tags/CSS/" style="font-size: 15px;">CSS</a> <a href="/tags/Database/" style="font-size: 20px;">Database</a> <a href="/tags/Distributed-System/" style="font-size: 15px;">Distributed System</a> <a href="/tags/Hibernate/" style="font-size: 10px;">Hibernate</a> <a href="/tags/JPA/" style="font-size: 20px;">JPA</a> <a href="/tags/Jackson/" style="font-size: 10px;">Jackson</a> <a href="/tags/Java/" style="font-size: 10px;">Java</a> <a href="/tags/Javascript/" style="font-size: 10px;">Javascript</a> <a href="/tags/Kotlin/" style="font-size: 10px;">Kotlin</a> <a href="/tags/Lambda-Calculus/" style="font-size: 15px;">Lambda Calculus</a> <a href="/tags/Linux/" style="font-size: 20px;">Linux</a> <a href="/tags/SQL/" style="font-size: 10px;">SQL</a> <a href="/tags/Sort/" style="font-size: 20px;">Sort</a> <a href="/tags/Spring/" style="font-size: 20px;">Spring</a> <a href="/tags/UNIX/" style="font-size: 10px;">UNIX</a> <a href="/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/" style="font-size: 15px;">编程技巧</a>
    </div>
</aside>

    
    
<aside class="widget">
    <h3 class="widget-title">归档</h3>
    <div class="widget-content">
        <ul class="archive-list"><li class="archive-list-item"><a class="archive-list-link" href="/archives/2024/06/">June 2024</a><span class="archive-list-count">2</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2019/10/">October 2019</a><span class="archive-list-count">1</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2019/05/">May 2019</a><span class="archive-list-count">2</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2019/03/">March 2019</a><span class="archive-list-count">2</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2019/02/">February 2019</a><span class="archive-list-count">2</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2019/01/">January 2019</a><span class="archive-list-count">1</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2017/07/">July 2017</a><span class="archive-list-count">1</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2017/06/">June 2017</a><span class="archive-list-count">1</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2017/03/">March 2017</a><span class="archive-list-count">3</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2017/02/">February 2017</a><span class="archive-list-count">1</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2017/01/">January 2017</a><span class="archive-list-count">2</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2016/12/">December 2016</a><span class="archive-list-count">1</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2016/09/">September 2016</a><span class="archive-list-count">1</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2016/06/">June 2016</a><span class="archive-list-count">1</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2016/05/">May 2016</a><span class="archive-list-count">5</span></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2016/04/">April 2016</a><span class="archive-list-count">3</span></li></ul>
    </div>
</aside>

    
</aside>
            </div>
        </div>
    </div>
    
    <footer id="footer">
    <div id="footer-info">
        &copy; 
        
        
            2015 - 
        
        <span itemprop="copyrightYear">2024</span>
        noob9527<br>
        Powered by <a href="/about">xy</a>
        .
        Theme Noob by <a href="/about">xy</a>
    </div>
</footer>

    
    

    

    
          <script type="text/javascript">
              var disqus_config = function () {
                  this.page.url = 'https://blog.staynoob.cn/salted-password-hashing';
                  this.page.identifier = '/salted-password-hashing';
                  this.page.title = '加密算法简介';
              };
              var d = document, s = d.createElement('script');
              s.src = 'https://staynoob.disqus.com/embed.js';
              s.setAttribute('data-timestamp', '' + +new Date());
              (d.head || d.body).appendChild(s);
          </script>
    

    
  <script type="text/javascript">
    var _hmt = _hmt || [];
    (function() {
      var hm = document.createElement("script");
      hm.src = "//hm.baidu.com/hm.js?855dd1a156248c0c337788236167c870";
      var s = document.getElementsByTagName("script")[0];
      s.parentNode.insertBefore(hm, s);
    })();
  </script>


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-76868752-1', 'auto');
  ga('send', 'pageview');
</script>


  <script type="text/javascript">
    (function() {
      var hm = document.createElement("script");
      hm.src = "//tajs.qq.com/stats?sId=55612284";
      var s = document.getElementsByTagName("script")[0];
      s.parentNode.insertBefore(hm, s);
    })();
  </script>


    
<script>
    (function(){
        var bp = document.createElement('script');
        var curProtocol = window.location.protocol.split(':')[0];
        if (curProtocol === 'https') {
            bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';
        }
        else {
            bp.src = 'http://push.zhanzhang.baidu.com/push.js';
        }
        var s = document.getElementsByTagName("script")[0];
        s.parentNode.insertBefore(bp, s);
    })();
</script>

    
  <!-- <script type="text/x-mathjax-config">
    MathJax.Hub.Config({
      tex2jax: {
        inlineMath: [ ['$','$'], ["\\(","\\)"]  ],
        processEscapes: true,
        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
      }
    });
  </script>
  <script type="text/x-mathjax-config">
    MathJax.Hub.Queue(function() {
      var all = MathJax.Hub.getAllJax(), i;
      for (i=0; i < all.length; i += 1) {
        all[i].SourceElement().parentNode.className += ' has-jax';
      }
    });
  </script>
  <script type="text/javascript" src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script> -->
  <!-- upgrade to mathjax 3 -->
  <!-- see https://www.mathjax.org/#gettingstarted -->
  <script>
  MathJax = {
    tex: {
      inlineMath: [['$', '$'], ['\\(', '\\)']]
    }
  };
  </script>
  <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
  <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>

</body>
</html>
